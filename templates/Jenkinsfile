pipeline{
    agent{
        label 'docker && maven'
    }
    options {
        skipStagesAfterUnstable()
    }
    tools {
        maven '3.8.5'
    }
    environment {
        APP_VERSION = sh (
            script: '''
                    grep -m 1 "<version>" pom.xml | awk -F'[><]' '{print $3}'
                    ''',
            returnStdout: true).trim()
        MODULE = sh (
            script: '''
                    grep -m 2 "<module>" pom.xml | tail -1 | awk -F'[><]' '{print $3}'
                    ''',
            returnStdout: true).trim()
        IMAGE_NAME = "aline-${MODULE}-dl"
        AWS_REGION = 'us-west-1'
        CREDENTIAL = 'jenkins-ecr'
    }
    stages {
        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Sonarqube') { 
            steps {
                withSonarQubeEnv('sonarqube') {
                sh 'mvn verify sonar:sonar'
              }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Package Jar') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }
        stage('Build Image') {
            steps {
                script {
                    sh """
                        docker build . \
                            --build-arg NAME=${MODULE} \
                            --build-arg VERSION=${APP_VERSION} \
                            --build-arg DIR=${MODULE} \
                            -t ${IMAGE_NAME}:${APP_VERSION}
                    """
                    }
            }
        }
        stage('Deploy to ECR') {
            steps {
              // use commented code instead if publishing to a public repo
                withAWS(credentials: "${CREDENTIAL}") {
                    // attempt to login to aws and pass credentials to docker
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} |\
                        docker login --username AWS --password-stdin ${env.REPOSITORY}
                    """
                    // // create repo if it doesn't already exist
                    sh """
                        aws ecr create-repository --repository-name ${IMAGE_NAME} || true
                    """
                    // add repo tag and push to aws
                    sh """
                        docker tag ${IMAGE_NAME}:${APP_VERSION} ${env.REPOSITORY}/${IMAGE_NAME}:${APP_VERSION}
                        docker push ${env.REPOSITORY}/${IMAGE_NAME} --all-tags
                    """
                }
                // script {
                //     docker.withRegistry("${env.REPOSITORY}", "ecr:${AWS_REGION}:${CREDENTIAL}") {
                //         app.push("${APP_VERSION}")
                //     }
                // }
            }
        }
    }
    post {
        always {
            sh 'docker image prune -f'
            cleanWs()
        }
    }
}
