pipeline {
  agent { label 'linux && terraform' }
  tools {
    terraform 'Terraform1.1.8'
  }
  environment {
    PROJECT_NAME = 'aline_financial_dl'
    WORKING_DIR = 'aws/myecs'
    REGION = 'us-west-1'
    ECS_CONTEXT = "${env.ECS_CONTEXT}"
    ECR_REPO = "${env.REPOSITORY}"
  }
  stages{
    stage('Pull TFState') {
      steps {
          script {
            try {
                withAWS(credentials:'jenkins-s3', region:"${env.TERRAFORM_S3_REGION}") {
                s3Download(file: "terraform.tfstate",
                            bucket: "${env.S3BUCKET}",
                            path: "${env.TFSTATE_PATH}")
                }
                try {
                    // test if infrastructure is deployed by checking whether outputs are set.
                    // No outputs indicate that the infrastructure isn't yet deployed
                    sh '''
                        VPC=$(cat terraform.tfstate | jq -r '.["outputs"]["vpc"]')
                        test "$VPC" != 'null'
                    '''
                } catch (err) {
                    // if no infrastructure exists, abort pipeline
                    currentBuild.result = 'ABORTED'
                    error('VPC does not exist')
                }
            } catch (err) {
                // if unable to get tfstate file for any reason, abort pipeline
                currentBuild.result = 'ABORTED'
                error("Could not pull tfstate: ${err}")
            }
          }
      }
    }
    stage('Set ECS Context') {
        steps {
            script {
                try {
                sh """
                    docker context use ${ECS_CONTEXT}
                """
                echo 'deploying to $(docker context show)'

                } catch (err) {
                    currentBuild.result = 'ABORTED'
                    error('error: Docker context not configured correctly on this client.')
                }
            }
        }
    }
    stage('Login to ECR Repo') {
        steps {
            sh '''
                aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin ${ECR_REPO}
            '''
        }
    }
    stage('Docker Compose Up') {
        environment {
            SECRET_ARN = sh(returnStdout: true,
                script: '''
                    cat terraform.tfstate | jq -r '.["outputs"]["secret_arn"]["value"]'
                ''')
            AWS_VPC = sh(returnStdout: true,
                script: '''
                    cat terraform.tfstate | jq -r '.["outputs"]["vpc"]["value"]'
                ''')
            SEC_GRP = sh(returnStdout: true,
                script: """
                    cat terraform.tfstate | jq -r '.["outputs"]["aws_security_group_id"]["value"]'
                """)
            DB_HOST = sh(returnStdout: true,
                script: '''
                    cat terraform.tfstate | jq -r '.["outputs"]["rds_address"]["value"]'
                ''')
            DB_NAME = sh(returnStdout: true,
                script: '''
                    cat terraform.tfstate | jq -r '.["outputs"]["rds_instance_name"]["value"]'
                ''')
            DB_PORT = sh(returnStdout: true,
                script: '''
                    cat terraform.tfstate | jq -r '.["outputs"]["rds_port"]["value"]'
                ''')
            LOAD_BAL = sh(returnStdout: true,
                script: '''
                    cat terraform.tfstate | jq -r '.["outputs"]["aws_alb_name"]["value"]'
                ''')
        }
        steps {
            withAWS(credentials:'jenkins-ecs', region:"${REGION}") {
                sh '''
                    aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin ${ECR_REPO}
                '''
                dir("$WORKING_DIR") {
                    sh 'docker compose up'
                }
            }
        }
    }
}
    post {
        always {
        sh 'docker context use default'
        cleanWs()
        }
    }
}
