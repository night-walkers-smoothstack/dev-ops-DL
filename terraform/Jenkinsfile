pipeline {
  agent { label 'linux && terraform' }
  tools {
    terraform 'Terraform1.1.8'
  }
  environment {
    WORKING_DIR = 'terraform/'
    REGION = 'us-west-1'
  }
  stages{
    stage('SonarQube analysis') {
      steps {
        script {
          withSonarQubeEnv('sonarqube') {
            sh """
            ${tool("sonarscan")}/bin/sonar-scanner \
                                -Dsonar.projectKey=terraform \
                                -Dsonar.sources=terraform
            """
          }
        }
      }
    }
    stage("Quality gate") {
      steps {
        timeout(time: 5, unit: 'MINUTES') {
            waitForQualityGate(abortPipeline: true)
        }
      }
    }
    stage('Init') {
      steps {
        withAWS(credentials:'terraform') {
          dir("$WORKING_DIR") {
            sh """
            terraform init -backend-config="bucket=${env.S3BUCKET}" \
                            -backend-config="region=${env.TERRAFORM_S3_REGION}" \
                            -backend-config="key=${env.TFSTATEFILE}"

            """
          }
        }
      }
    }
    // stage('Set TF Vars') {
    //   steps {}
    // }
    stage('Get TFVars') {
      steps {
        withAWS(credentials:'terraform', region:"${env.TERRAFORM_S3_REGION}") {
          s3Download(file: "${WORKING_DIR}/terraform.tfvars",
                     bucket: "${env.S3BUCKET}",
                     path: 'terraform.tfvars')
        }
      }
    }
    stage('Plan') {
      steps {
        withAWS(credentials:'terraform', region:"${REGION}") {
          dir("${WORKING_DIR}") {
            sh 'terraform plan --var-file=terraform.tfvars'
          }
        }
      }
    }
    
    stage('Apply') {
      steps {
        withAWS(credentials:'terraform', region:"${REGION}") {
          dir("${WORKING_DIR}") {
            sh '''
            terraform apply --var-file=terraform.tfvars \
                            -no-color \
                            -input=false \
                            -auto-approve
            '''
          } 
        }
      }
    }
  }
  post {
    always {
      cleanWs()
    }
  }
}